---
# Variables for building backend
auth_required: true
loan_action: true
total_records_key: totalRecords
load_addresstypes: true
load_mods_larger: true
hierarchical_locations: false
load_class_types: false
load_name_types: false
load_contrib_types: false
load_id_types: false
load_instance_formats: false
load_instance_types: false
load_platforms: false
load_holdings: false
load_service_points: true
loan_action: false
service_points_users: false

# set the default postgres connection pool per module/tenant
pg_max_pool_size: 5

folio_modules:
  - index: 0
    name: mod-authtoken
    module_id: authtoken-module
    version: 0.6.1
    docker_tag: v0.6.1
    mod_descriptor_repo: http://folio-registry.aws.indexdata.com
    image_repository: folioorg
    okapi_docker_pull: "false"

  - index: 1
    name: mod-permissions
    module_id: permissions-module
    version: 4.0.4
    docker_tag: v4.0.4
    mod_descriptor_repo: http://folio-registry.aws.indexdata.com
    image_repository: folioorg
    docker_env:
      - { name: db.host, value: "{{ module_pg_host }}" }
      - { name: db.port, value: "{{ pg_port }}" }
      - { name: db.username, value: "{{ pg_admin_user }}" }
      - { name: db.password, value: "{{ pg_admin_password }}" }
      - { name: db.database, value: "{{ module_database }}" }
      - { name: db.maxPoolSize, value: "{{ pg_max_pool_size }}" }
    storage: postgres
    database: "{{ module_database }}"
    pg_user: "{{ pg_admin_user }}"
    pg_password: "{{ pg_admin_password }}"
    okapi_docker_pull: "false"

  - index: 2
    name: mod-login
    module_id: login-module
    version: 3.1.0
    docker_tag: v3.1.0
    mod_descriptor_repo: http://folio-registry.aws.indexdata.com
    image_repository: folioorg
    docker_cmd:
      - "verify.user=true"
    docker_env:
      - { name: db.host, value: "{{ module_pg_host }}" }
      - { name: db.port, value: "{{ pg_port }}" }
      - { name: db.username, value: "{{ pg_admin_user }}" }
      - { name: db.password, value: "{{ pg_admin_password }}" }
      - { name: db.database, value: "{{ module_database }}" }
      - { name: db.maxPoolSize, value: "{{ pg_max_pool_size }}" }
    storage: postgres
    database: "{{ module_database }}"
    pg_user: "{{ pg_admin_user }}"
    pg_password: "{{ pg_admin_password }}"
    okapi_docker_pull: "false"

  - index: 3
    name: mod-configuration
    module_id: configuration
    version: 2.0.0
    docker_tag: v2.0.0
    mod_descriptor_repo: http://folio-registry.aws.indexdata.com
    image_repository: folioorg
    docker_env:
      - { name: db.host, value: "{{ module_pg_host }}" }
      - { name: db.port, value: "{{ pg_port }}" }
      - { name: db.username, value: "{{ pg_admin_user }}" }
      - { name: db.password, value: "{{ pg_admin_password }}" }
      - { name: db.database, value: "{{ module_database }}" }
      - { name: db.maxPoolSize, value: "{{ pg_max_pool_size }}" }
    storage: postgres
    database: "{{ module_database }}"
    pg_user: "{{ pg_admin_user }}"
    pg_password: "{{ pg_admin_password }}"
    okapi_docker_pull: "false"
    
  - index: 4
    name: mod-users
    version: 14.2.0
    docker_tag: v14.2.0
    mod_descriptor_repo: http://folio-registry.aws.indexdata.com
    image_repository: folioorg
    docker_env:
      - { name: db.host, value: "{{ module_pg_host }}" }
      - { name: db.port, value: "{{ pg_port }}" }
      - { name: db.username, value: "{{ pg_admin_user }}" }
      - { name: db.password, value: "{{ pg_admin_password }}" }
      - { name: db.database, value: "{{ module_database }}" }
      - { name: db.maxPoolSize, value: "{{ pg_max_pool_size }}" }
    storage: postgres
    database: "{{ module_database }}"
    pg_user: "{{ pg_admin_user }}"
    pg_password: "{{ pg_admin_password }}"
    okapi_docker_pull: "false"

  - index: 5
    name: mod-users-bl
    version: 2.0.2
    docker_tag: v2.0.2
    mod_descriptor_repo: http://folio-registry.aws.indexdata.com
    image_repository: folioorg
    okapi_docker_pull: "false"

  - index: 6
    name: mod-inventory-storage
    module_id: inventory-storage
    version: 5.1.0
    docker_tag: v5.1.0
    mod_descriptor_repo: http://folio-registry.aws.indexdata.com
    image_repository: folioorg
    docker_env:
      - { name: db.host, value: "{{ module_pg_host }}" }
      - { name: db.port, value: "{{ pg_port }}" }
      - { name: db.username, value: "{{ pg_admin_user }}" }
      - { name: db.password, value: "{{ pg_admin_password }}" }
      - { name: db.database, value: "{{ module_database }}" }
      - { name: db.maxPoolSize, value: "{{ pg_max_pool_size }}" }
    storage: postgres
    database: "{{ module_database }}"
    pg_user: "{{ pg_admin_user }}"
    pg_password: "{{ pg_admin_password }}"
    okapi_docker_pull: "false"

  - index: 7
    name: mod-inventory
    module_id: inventory
    version: 5.1.1
    docker_tag: v5.1.1
    mod_descriptor_repo: http://folio-registry.aws.indexdata.com
    image_repository: folioorg
    docker_env:
      - { name: JAVA_OPTIONS, value: "-Dorg.folio.metadata.inventory.storage.type=okapi" }
    okapi_docker_pull: "false"

  - index: 8
    name: mod-circulation-storage
    module_id: circulation-storage
    version: 3.2.0
    docker_tag: v3.2.0
    mod_descriptor_repo: http://folio-registry.aws.indexdata.com
    image_repository: folioorg
    docker_env:
      - { name: db.host, value: "{{ module_pg_host }}" }
      - { name: db.port, value: "{{ pg_port }}" }
      - { name: db.username, value: "{{ pg_admin_user }}" }
      - { name: db.password, value: "{{ pg_admin_password }}" }
      - { name: db.database, value: "{{ module_database }}" }
      - { name: db.maxPoolSize, value: "{{ pg_max_pool_size }}" }
    storage: postgres
    database: "{{ module_database }}"
    pg_user: "{{ pg_admin_user }}"
    pg_password: "{{ pg_admin_password }}"
    okapi_docker_pull: "false"

  - index: 9
    name: mod-circulation
    module_id: circulation
    version: 4.4.0
    docker_tag: v4.4.0
    mod_descriptor_repo: http://folio-registry.aws.indexdata.com
    image_repository: folioorg
    okapi_docker_pull: "false"

  - index: 10
    name: mod-notes
    version: 0.2.0
    docker_tag: v0.2.0
    mod_descriptor_repo: http://folio-registry.aws.indexdata.com
    image_repository: folioorg
    docker_env:
      - { name: db.host, value: "{{ module_pg_host }}" }
      - { name: db.port, value: "{{ pg_port }}" }
      - { name: db.username, value: "{{ pg_admin_user }}" }
      - { name: db.password, value: "{{ pg_admin_password }}" }
      - { name: db.database, value: "{{ module_database }}" }
      - { name: db.maxPoolSize, value: "{{ pg_max_pool_size }}" }
    storage: postgres
    database: "{{ module_database }}"
    pg_user: "{{ pg_admin_user }}"
    pg_password: "{{ pg_admin_password }}"
    okapi_docker_pull: "false"

  - index: 11
    name: mod-notify
    version: 0.1.1
    docker_tag: v0.1.1
    mod_descriptor_repo: http://folio-registry.aws.indexdata.com
    image_repository: folioorg
    docker_env:
      - { name: db.host, value: "{{ module_pg_host }}" }
      - { name: db.port, value: "{{ pg_port }}" }
      - { name: db.username, value: "{{ pg_admin_user }}" }
      - { name: db.password, value: "{{ pg_admin_password }}" }
      - { name: db.database, value: "{{ module_database }}" }
      - { name: db.maxPoolSize, value: "{{ pg_max_pool_size }}" }
    storage: postgres
    database: "{{ module_database }}"
    pg_user: "{{ pg_admin_user }}"
    pg_password: "{{ pg_admin_password }}"
    okapi_docker_pull: "false"

# UI build will use stripes-demo-platform per defaults in stripes-docker role
okapi_register_modules: true
okapi_enable_modules: true
stripes_strict_md: true
with_sourcemap: false

# retrofit for older mod-login and mod-permissions
# see FOLIO-827 and FOLIO-905
auth_by_username: true
admin_user:
  username: diku_admin
  password: admin
  hash: 52DCA1934B2B32BEA274900A496DF162EC172C1E
  salt: 483A7C864569B90C24A0A6151139FF0B95005B16
  permissions: "\\\"perms.all\\\""
  id: 1ad737b0-d847-11e6-bf26-cec0c932ce01
  first_name: DIKU
  last_name: ADMINISTRATOR
  email: admin@diku.example.org

mod_auth_users:
  - username: auth_test1
    password: diku
    permissions:
      - module.trivial.enabled
      - module.users.enabled
      - module.items.enabled
      - module.scan.enabled
      - module.requests.enabled
      - module.okapi-console.enabled
      - module.organization.enabled
      - module.settings.enabled
  - username: auth_test2
    password: diku

# Metadata for CI build
version: 4.1.0
version_descr: |
  Admin login: diku_admin/admin

  Changes since v4.0.0:
  * Update ui-plugin-find-user to v1.1.0
