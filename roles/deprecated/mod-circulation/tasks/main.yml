---
# Role to pull the Docker image from folioci and deploy into running Okapi

#########
# Setup #
#########

- name: Pull the mod-circulation Docker image
  become: yes
  become_user: "{{ folio_user }}"
  docker_image: name=folioci/mod-circulation tag={{ mod_circulation_version }}
  register: mod_circulation_pull

- name: Set up mod-circulation home directory
  become: yes
  file: state=directory path={{ mod_circulation_home }}/bin

- name: Set up mod-circulation conf directory
  become: yes
  file: state=directory path={{ mod_circulation_conf }}

- name: Copy module descriptor to remote
  become: yes
  get_url: url={{ mod_circulation_mod_descriptor }} dest={{ mod_circulation_conf }}/ModuleDescriptor.json
  register: mod_circulation_mod_descr_update

- name: Copy deployment descriptor
  become: yes
  template: src=DeploymentDescriptor.json.j2 dest={{ mod_circulation_conf }}/DeploymentDescriptor.json
  notify:
    - Restart mod-circulation

- name: Copy mod-circulation.conf
  become: yes
  template: src=mod-circulation.conf.j2 dest={{ mod_circulation_conf }}/mod-circulation.conf
  notify:
    - Restart mod-circulation

- name: Copy mod-circulation.env
  become: yes
  copy: src=mod-circulation.env dest=/etc/default/mod-circulation
  notify:
    - Restart mod-circulation

- name: Copy mod-circulation.sh
  become: yes
  copy: src=mod-circulation.sh dest={{ mod_circulation_home }}/bin/mod-circulation.sh mode=0755
  notify:
    - Restart mod-circulation

- name: Copy mod-circulation.service file
  become: yes
  template: src=mod-circulation.service.j2 dest=/etc/systemd/system/mod-circulation.service
  register: mod_circulation_service_update
  notify:
    - Restart mod-circulation

- name: systemctl daemon-reload
  become: yes
  command: systemctl daemon-reload
  when: mod_circulation_service_update.changed

- name: Enable mod-circulation service
  become: yes
  service: name=mod-circulation enabled=yes

#########################
# Undeploy if new image #
#########################

- name: Get tenants
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants"
    status_code: 200
  when:
    - mod_circulation_pull.changed or mod_circulation_mod_descr_update.changed
  register: tenants

- name: Check tenant mod-user registration
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/{{ item.id }}/modules/circulation"
    status_code: 200, 404
  when:
    - mod_circulation_pull.changed or mod_circulation_mod_descr_update.changed
  with_items: "{{ tenants.json | default([]) }}"
  register: tenant_mod_circulation

- name: Unregister mod-circulation module for tenants if image updated
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/{{ item[0].id }}/modules/circulation"
    method: DELETE
    status_code: 204
  when:
    - mod_circulation_pull.changed or mod_circulation_mod_descr_update.changed
    - item[1].status == 200
  with_nested:
    - "{{ tenants.json | default([]) }}"
    - "{{ tenant_mod_circulation.results | default([]) }}"

- name: Stop mod-circulation service if image updated
  become: yes
  service: name=mod-circulation state=stopped
  when:
    - mod_circulation_pull.changed or mod_circulation_mod_descr_update.changed

- name: Un-register mod-circulation if image updated
  uri:
    url: "{{ okapi_url }}/_/proxy/modules/circulation"
    method: DELETE
    status_code: 204, 404
  when: mod_circulation_pull.changed or mod_circulation_mod_descr_update.changed
  register: mod_circulation_unreg
  changed_when: "mod_circulation_unreg.status == 204"

#######################################
# Register and launch mod-circulation #
#######################################

- name: Check mod-circulation module registration
  uri:
    url: "{{ okapi_url }}/_/proxy/modules/circulation"
    status_code: 200, 404
  register: mod_circulation_reg_status

- name: Register mod-circulation module
  shell: "curl -X POST -H \"Content-Type: application/json\" -d @{{ mod_circulation_conf }}/ModuleDescriptor.json -sSf {{ okapi_url }}/_/proxy/modules"
  when: mod_circulation_reg_status.status == 404
  notify: Restart mod-circulation

- meta: flush_handlers
