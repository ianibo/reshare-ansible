---
# Role to enable mod-metadata modules for the sample tenant and load
# sample data
# wait a few seconds to make sure modules are spun up
- wait_for: timeout=10

- set_fact: mod_metadata_modules=[]

- set_fact:
    mod_metadata_modules: "{{ mod_metadata_modules }} + {{ okapi_modules|selectattr('id','match','^'+item+'(-[0-9].*)?$')|list }}"
  with_items: "{{ mod_metadata_prefixes }}"
  when: not top_down_install

- name: Check tenant registration
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/diku/modules/{{ item.id }}"
    status_code: 200, 404
  register: tenant_mod_metadata
  with_items: "{{ mod_metadata_modules }}"
  when: not top_down_install

- name: Enable mod-metadata modules for tenant
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/diku/modules"
    method: POST
    body_format: json
    body: '{ "id" : "{{ item.1.id }}" }'
    status_code: 201
  register: mod_metadata_enable
  changed_when: mod_metadata_enable.status == 201
  when: tenant_mod_metadata.results[item.0].status == 404
  with_indexed_items: "{{ mod_metadata_modules }}"

- name: Login as {{ admin_user.username }}
  uri:
    url: "{{ okapi_url }}/authn/login"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
    body: "{ 'username' : '{{ admin_user.username }}', 'password' : '{{ admin_user.password }}' }"
    status_code: 201
  register: mod_metadata_login
  when: auth_required

- name: Grant additional permissions to {{ admin_user.username }} (auth by username)
  uri:
    url: "{{ okapi_url }}/perms/users/{{ admin_user.username }}/permissions"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "permissionName" : "{{ item }}" }'
    status_code: 200,422
  register: admin_perms
  changed_when: admin_perms.status == 200
  with_items: "{{ metadata_admin_permissions }}"
  when: auth_required and auth_by_username

- name: Grant additional permissions to {{ admin_user.username }} (auth by id)
  uri:
    url: "{{ okapi_url }}/perms/users/{{ admin_user.perms_user_id }}/permissions"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "permissionName" : "{{ item }}" }'
    status_code: 200,422
  register: admin_perms
  changed_when: admin_perms.status == 200
  with_items: "{{ metadata_admin_permissions }}"
  when: auth_required and not auth_by_username

- name: Check for sample instances
  uri:
    url: "{{ okapi_url }}/instance-storage/instances"
    headers:
      Authtoken-Refresh-Cache: "true"
      Content-Type: application/json
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
  register: inventory_instances

- name: Check for sample items
  uri:
    url: "{{ okapi_url }}/item-storage/items"
    headers:
      Content-Type: application/json
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
  register: inventory_items

# fails with 400 or 422 error if already loaded
- name: Load inventory storage classification types
  uri:
    url: "{{ okapi_url }}/classification-types"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 400, 422
  register: load_classtype
  changed_when: load_classtype.status == 201
  with_fileglob:
    - classificationtypes/*.json
  when: inv_storage_3

# fails with 400 or 422 error if already loaded
- name: Load inventory storage contributor name types
  uri:
    url: "{{ okapi_url }}/contributor-name-types"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 400, 422
  register: load_contribnametype
  changed_when: load_contribnametype.status == 201
  with_fileglob:
    - contributornametypes/*.json
  when: inv_storage_3

# fails with 400 or 422 error if already loaded
- name: Load inventory storage contributor types
  uri:
    url: "{{ okapi_url }}/contributor-types"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 400, 422
  register: load_contribtype
  changed_when: load_contribtype.status == 201
  with_fileglob:
    - contributortypes/*.json
  when: inv_storage_3

# fails with 400 or 422 error if already loaded
- name: Load inventory storage identifier types
  uri:
    url: "{{ okapi_url }}/identifier-types"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 400, 422
  register: load_idtype
  changed_when: load_idtype.status == 201
  with_fileglob:
    - identifiertypes/*.json
  when: inv_storage_3

# fails with 400 or 422 error if already loaded
- name: Load inventory storage instance formats
  uri:
    url: "{{ okapi_url }}/instance-formats"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 400, 422
  register: load_instformat
  changed_when: load_instformat.status == 201
  with_fileglob:
    - instanceformats/*.json
  when: inv_storage_3

# fails with 400 or 422 error if already loaded
- name: Load inventory storage instance types
  uri:
    url: "{{ okapi_url }}/instance-types"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 400, 422
  register: load_insttype
  changed_when: load_insttype.status == 201
  with_fileglob:
    - instancetypes/*.json
  when: inv_storage_3

# fails with 400 if already loaded
- name: Load inventory storage loan types
  uri:
    url: "{{ okapi_url }}/loan-types"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 400
  register: load_ltype
  changed_when: load_ltype.status == 201
  with_fileglob:
    - loantypes/*.json

# fails with 422 error if already loaded
- name: Load inventory storage material types
  uri:
    url: "{{ okapi_url }}/material-types"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 422
  register: load_mtype
  changed_when: load_mtype.status == 201
  with_fileglob:
    - mtypes/*.json

# fails with 400 or 422 error if already loaded
- name: Load inventory storage platforms
  uri:
    url: "{{ okapi_url }}/platforms"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 400, 422
  register: load_platform
  changed_when: load_platform.status == 201
  with_fileglob:
    - platforms/*.json
  when: inv_storage_3

# fails with 422 error if already loaded
- name: Load inventory storage shelf locations
  uri:
    url: "{{ okapi_url }}/shelf-locations"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 422
  register: load_shelfloc
  changed_when: load_shelfloc.status == 201
  with_fileglob:
    - shelf-locations/*.json
  when: inv_storage_3 and shelf_locations

# fails with 422 error if already loaded
- name: Load inventory storage institutions
  uri:
    url: "{{ okapi_url }}/location-units/institutions"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 422
  register: load_locinst
  changed_when: load_locinst.status == 201
  with_fileglob:
    - location-units/institutions/*.json
  when: inv_storage_3 and hierarchical_locations

# fails with 422 error if already loaded
- name: Load inventory storage campuses
  uri:
    url: "{{ okapi_url }}/location-units/campuses"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 422
  register: load_loccamp
  changed_when: load_loccamp.status == 201
  with_fileglob:
    - location-units/campuses/*.json
  when: inv_storage_3 and hierarchical_locations

# fails with 422 error if already loaded
- name: Load inventory storage libraries
  uri:
    url: "{{ okapi_url }}/location-units/libraries"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 422
  register: load_loclib
  changed_when: load_loclib.status == 201
  with_fileglob:
    - location-units/libraries/*.json
  when: inv_storage_3 and hierarchical_locations

# fails with 422 error if already loaded
- name: Load inventory storage locations
  uri:
    url: "{{ okapi_url }}/locations"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 422
  register: load_location
  changed_when: load_location.status == 201
  with_fileglob:
    - locations/*.json
  when: inv_storage_3 and hierarchical_locations

- name: Create instance records directory
  become: yes
  file: dest=/etc/.folio-instances_ansible state=directory

- name: Copy instance records
  become: yes
  template: src=instances/{{ item }} dest=/etc/.folio-instances_ansible/{{ item }}
  with_items:
    - aba.json
    - american-journal-of-medicine.json
    - bridgets-baby-instance.json
    - girl-on-the-train-instance.json
    - interesting-times-instance.json
    - nod-instance.json
    - temeraire-instance.json
    - transparent-water.json

- name: Slurp instance files
  slurp: src=/etc/.folio-instances_ansible/{{ item }}
  with_items:
    - aba.json
    - american-journal-of-medicine.json
    - bridgets-baby-instance.json
    - girl-on-the-train-instance.json
    - interesting-times-instance.json
    - nod-instance.json
    - temeraire-instance.json
    - transparent-water.json
  register: instancefiles_content

- name: Load instances
  uri:
    url: "{{ okapi_url }}/instance-storage/instances"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ item.content|b64decode }}"
    status_code: 201
  register: load_instance
  changed_when: load_instance.status == 201
  with_items: "{{ instancefiles_content.results }}"
  when: inventory_items.json.totalRecords == 0
  
# fails with 400 or 422 error if already loaded
- name: Load holdings
  uri:
    url: "{{ okapi_url }}/holdings-storage/holdings"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201, 400, 422
  register: load_holding
  changed_when: load_holding.status == 201
  with_fileglob:
    - holdingsrecords/*.json
  when: inv_storage_3

- name: Create item records directory
  become: yes
  file: dest=/etc/.folio-items_ansible state=directory

- name: Copy item records
  become: yes
  template: src=items/{{ item }} dest=/etc/.folio-items_ansible/{{ item }}
  with_items:
    - aba.json
    - american-journal-of-medicine.json
    - bridget-jones-baby-item.json
    - bridget-jones-baby-item_2.json
    - bridget-jones-baby-item_3.json
    - girl-on-the-train-item.json
    - interesting-times-item.json
    - nod-item.json
    - temeraire-item.json
    - temeraire2-item.json

- name: Slurp item files
  slurp: src=/etc/.folio-items_ansible/{{ item }}
  with_items:
    - aba.json
    - american-journal-of-medicine.json
    - bridget-jones-baby-item.json
    - bridget-jones-baby-item_2.json
    - bridget-jones-baby-item_3.json
    - girl-on-the-train-item.json
    - interesting-times-item.json
    - nod-item.json
    - temeraire-item.json
    - temeraire2-item.json
  register: itemfiles_content

- name: Load items
  uri:
    url: "{{ okapi_url }}/item-storage/items"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_metadata_login.x_okapi_token | default('token') }}"
    body: "{{ item.content|b64decode }}"
    status_code: 201
  register: load_item
  changed_when: load_item.status == 201
  with_items: "{{ itemfiles_content.results }}"
  when: inventory_items.json.totalRecords == 0

- name: Copy sample MODS data
  become: yes
  copy: src=multiple-mods-records.xml dest=/etc/.mod-metadata-mods_ansible.xml
  register: mods_sample

- name: Copy larger sample
  become: yes
  copy: src=many_mods.xml dest=/etc/.mod-metadata-mods-large_ansible.xml
  register: mods_larger

- name: Load sample data from MODS ingest
  command: "/usr/bin/curl -X POST -H 'Content-type: multipart/form-data' -H 'X-Okapi-Tenant: diku' -H 'X-Okapi-Token: {{ mod_metadata_login.x_okapi_token | default('token') }}' -F upload=@/etc/.mod-metadata-mods_ansible.xml {{ okapi_url }}/inventory/ingest/mods"
  when: mods_sample.changed

- name: Load larger sample data from MODS ingest
  command: "/usr/bin/curl -w '\n' -D - -X POST -H 'Content-type: multipart/form-data' -H 'X-Okapi-Tenant: diku' -H 'X-Okapi-Token: {{ mod_metadata_login.x_okapi_token | default('token') }}' -F upload=@/etc/.mod-metadata-mods-large_ansible.xml {{ okapi_url }}/inventory/ingest/mods"
  when: mods_larger.changed
  register: mods_load
  notify: "Wait for MODS"

- name: Get location for upload status
  set_fact:
    upload_status_location: "{{ mods_load.stdout_lines|select('match','^Location:')|list|first|regex_replace('^Location: ') }}"

- meta: flush_handlers
