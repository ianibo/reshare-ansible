---
# Role to build a demo mod-auth with permissions for the sample tenant
#

# wait a few seconds to make sure modules are spun up
- wait_for: timeout=5

########################################
# Bootstrap admin user and permissions #
########################################

- name: Create .pgpass for Ansible user
  lineinfile:
    dest: "{{ ansible_env.HOME }}/.pgpass"
    line: "{{ pg_host }}:{{ pg_port }}:*:{{ pg_admin_user }}:{{ pg_admin_password }}"
    create: yes
    mode: 0600

- name: Check auth_credentials for diku_admin user (auth by username)
  shell: psql -h {{ pg_host }} -p {{ pg_port}} -U {{ pg_admin_user }} -qtwc "select count(*) from {{ mod_login_schema }}.auth_credentials where jsonb @> '{\"username\":\"{{ admin_user.username }}\"}'" {{ module_database }}
  register: diku_admin_credentials_username
  changed_when: no
  when: auth_by_username

- name: Check auth_credentials for diku_admin user (auth by id)
  shell: psql -h {{ pg_host }} -p {{ pg_port}} -U {{ pg_admin_user }} -qtwc "select count(*) from {{ mod_login_schema }}.auth_credentials where jsonb @> '{\"userId\":\"{{ admin_user.id }}\"}'" {{ module_database }}
  register: diku_admin_credentials_id
  changed_when: no
  when: not auth_by_username

- name: Insert diku_admin user into auth_credentials (auth by username)
  shell: psql -h {{ pg_host }} -p {{ pg_port}} -U {{ pg_admin_user }} -qtwc "insert into {{ mod_login_schema }}.auth_credentials (jsonb) values ('{\"username\":\"{{ admin_user.username }}\",\"hash\":\"{{ admin_user.hash }}\",\"salt\":\"{{ admin_user.salt }}\"}')" {{ module_database }}
  when: auth_by_username and (diku_admin_credentials_username.stdout | int == 0)
 
- name: Insert diku_admin user into auth_credentials (auth by id)
  shell: psql -h {{ pg_host }} -p {{ pg_port}} -U {{ pg_admin_user }} -qtwc "insert into {{ mod_login_schema }}.auth_credentials (jsonb) values ('{\"userId\":\"{{ admin_user.id }}\",\"hash\":\"{{ admin_user.hash }}\",\"salt\":\"{{ admin_user.salt }}\"}')" {{ module_database }}
  when: not auth_by_username and (diku_admin_credentials_id.stdout | int == 0)

- name: Check permissions_users for diku_admin user (auth by username)
  shell: psql -h {{ pg_host }} -p {{ pg_port}} -U {{ pg_admin_user }} -qtwc "select count(*) from {{ mod_permissions_schema }}.permissions_users where jsonb @> '{\"username\":\"{{ admin_user.username }}\"}'" {{ module_database }}
  register: diku_admin_permissions_username
  changed_when: no
  when: auth_by_username

- name: Check permissions_users for diku_admin user (auth by id)
  shell: psql -h {{ pg_host }} -p {{ pg_port}} -U {{ pg_admin_user }} -qtwc "select count(*) from {{ mod_permissions_schema }}.permissions_users where jsonb @> '{\"userId\":\"{{ admin_user.id }}\"}'" {{ module_database }}
  register: diku_admin_permissions_id
  changed_when: no
  when: not auth_by_username

- name: Insert diku_admin user into permissions_users (auth by username)
  shell: psql -h {{ pg_host }} -p {{ pg_port}} -U {{ pg_admin_user }} -qtwc "insert into {{ mod_permissions_schema }}.permissions_users (jsonb) values ('{\"username\":\"{{ admin_user.username }}\",\"permissions\":[{{ admin_user.permissions }}]}')" {{ module_database }}
  when: auth_by_username and (diku_admin_permissions_username.stdout | int == 0)

- name: Insert diku_admin user into permissions_users (auth by id)
  shell: psql -h {{ pg_host }} -p {{ pg_port}} -U {{ pg_admin_user }} -qtwc "insert into {{ mod_permissions_schema }}.permissions_users (jsonb) values ('{\"id\":\"{{ admin_user.perms_user_id }}\",\"userId\":\"{{ admin_user.id }}\",\"permissions\":[{{ admin_user.permissions }}]}')" {{ module_database }}
  when: not auth_by_username and (diku_admin_permissions_id.stdout | int == 0)

- name: Check mod-users for diku_admin user
  shell: psql -h {{ pg_host }} -p {{ pg_port}} -U {{ pg_admin_user }} -qtwc "select count(*) from {{ mod_users_schema }}.users where jsonb @> '{\"username\":\"{{ admin_user.username }}\"}'" {{ module_database }}
  register: diku_admin_mod_users
  changed_when: no

- name: Insert diku_admin user into mod_users
  shell: psql -h {{ pg_host }} -p {{ pg_port}} -U {{ pg_admin_user }} -qtwc "insert into {{ mod_users_schema }}.users (jsonb) values ('{\"username\":\"{{ admin_user.username }}\",\"id\":\"{{ admin_user.id }}\",\"active\":true,\"personal\":{\"lastName\":\"{{ admin_user.last_name }}\",\"firstName\":\"{{ admin_user.first_name }}\",\"email\":\"{{ admin_user.email }}\"}}')" {{ module_database }}
  when: diku_admin_mod_users.stdout | int == 0
  
###############################################
# Create other mod_auth permissions and users #
###############################################

- name: Login as {{ admin_user.username }}
  uri:
    url: "{{ okapi_url }}/authn/login"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
    body: "{ 'username' : '{{ admin_user.username }}', 'password' : '{{ admin_user.password }}' }"
    status_code: 201
  register: mod_auth_login

- name: Load additional permissions
  uri:
    url: "{{ okapi_url }}/perms/permissions"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: |
      {
        'permissionName' : '{{ item.permissionName }}',
        'displayName' : '{{ item.displayName }}',
        'subPermissions' : {{ item.subPermissions }},
        'mutable' : {{ item.mutable }},
        'visible' : {{ item.visible|default(false) }}
      }
    status_code: 201,422
  register: load_mod_users_perms
  changed_when: load_mod_users_perms.status == 201
  with_items: "{{ additional_permissions }}"

- name: Grant additional permissions to {{ admin_user.username }} (auth by username)
  uri:
    url: "{{ okapi_url }}/perms/users/{{ admin_user.username }}/permissions"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "permissionName" : "{{ item }}" }'
    status_code: 200,422
  register: other_users_admin_perms
  changed_when: other_users_admin_perms.status == 200
  with_items: "{{ admin_permissions }}"
  when: auth_by_username

- name: Grant additional permissions to {{ admin_user.username }} (auth by id)
  uri:
    url: "{{ okapi_url }}/perms/users/{{ admin_user.perms_user_id }}/permissions"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "permissionName" : "{{ item }}" }'
    status_code: 200,422
  register: other_users_admin_perms
  changed_when: other_users_admin_perms.status == 200
  with_items: "{{ admin_permissions }}"
  when: not auth_by_username

# 422 error means the user is already there  
- name: Load users
  uri:
    url: "{{ okapi_url }}/users"
    method: POST
    body_format: json
    headers:
      Authtoken-Refresh-Cache: "true"
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201,422
  register: load_user
  changed_when: load_user.status == 201
  with_fileglob:
    - "*.json"

- name: Create mod-auth credentials for other users (auth by username)
  uri:
    url: "{{ okapi_url }}/authn/credentials"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "username" : "{{ item.username }}", "password" : "{{ item.password }}" }'
    status_code: 201,422
  register: create_creds
  changed_when: create_creds.status == 201
  with_items: "{{ mod_auth_users }}"
  when: auth_by_username

- name: Create mod-auth credentials for other users (auth by id)
  uri:
    url: "{{ okapi_url }}/authn/credentials"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "userId" : "{{ item.id }}", "password" : "{{ item.password }}" }'
    status_code: 201,422
  register: create_creds
  changed_when: create_creds.status == 201
  with_items: "{{ mod_auth_users }}"
  when: not auth_by_username

- name: Create other perms users (auth by username)
  uri:
    url: "{{ okapi_url }}/perms/users"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "username" : "{{ item.username }}" }'
    status_code: 201,422
  register: create_perms
  changed_when: create_perms.status == 201
  with_items: "{{ mod_auth_users }}"
  when: auth_by_username

- name: Create other perms users (auth by id)
  uri:
    url: "{{ okapi_url }}/perms/users"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "id": "{{ item.perms_user_id }}", "userId" : "{{ item.id }}" }'
    status_code: 201,422
  register: create_perms
  changed_when: create_perms.status == 201
  with_items: "{{ mod_auth_users }}"
  when: not auth_by_username

- name: Grant additional permissions to other users (auth by username)
  uri:
    url: "{{ okapi_url }}/perms/users/{{ item.0.username }}/permissions"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "permissionName" : "{{ item.1 }}" }'
    status_code: 200,422
  register: mod_users_admin_perms
  changed_when: mod_users_admin_perms.status == 200
  with_subelements:
    - "{{ mod_auth_users }}"
    - permissions
    - skip_missing: true
  when: auth_by_username

- name: Grant additional permissions to other users (auth by id)
  uri:
    url: "{{ okapi_url }}/perms/users/{{ item.0.perms_user_id }}/permissions"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "permissionName" : "{{ item.1 }}" }'
    status_code: 200,422
  register: mod_users_admin_perms
  changed_when: mod_users_admin_perms.status == 200
  with_subelements:
    - "{{ mod_auth_users }}"
    - permissions
    - skip_missing: true
  when: not auth_by_username
